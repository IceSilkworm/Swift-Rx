//
//  Introduce_03.swift
//  练习
//
//  Created by hudun on 2017/8/14.
//  Copyright © 2017年 hudun. All rights reserved.
//

import UIKit

class Introduce_03: NSObject {

    //MARK: - 类和结构体的选择”
    
    
    //“可以使用类和结构体来定义你的自定义数据类型。
    
    //然而，结构体实例总是通过值传递，类实例总是通过引用传递。这意味两者适用不同的任务。当你在考虑一个工程项目的数据结构和功能的时候，你需要决定每个数据结构是定义成类还是结构体。”
    
    /*
     
     “按照通用的准则，当符合一条或多条以下条件时，请考虑构建结构体：
     
     该数据结构的主要目的是用来封装少量相关简单数据值。
     有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用。
     该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用。
     该数据结构不需要去继承另一个既有类型的属性或者行为。
     
     
     举例来说，以下情境中适合使用结构体：
     
     几何形状的大小，封装一个width属性和height属性，两者均为Double类型。
     一定范围内的路径，封装一个start属性和length属性，两者均为Int类型。
     三维坐标系内一点，封装x，y和z属性，三者均为Double类型。
     
     
     “在所有其它案例中，定义一个类，生成一个它的实例，并通过引用来管理和传递。实际中，这意味着绝大部分的自定义数据构造都应该是类，而非结构体。”
     
     */
    
    
    //MARK: - “字符串、数组、和字典类型的赋值与复制行为”
    
    /*
     
     “Swift 中，许多基本类型，诸如String，Array和Dictionary类型均以结构体的形式实现。这意味着被赋值给新的常量或变量，或者被传入函数或方法中时，它们的值会被拷贝。
     
     Objective-C 中NSString，NSArray和NSDictionary类型均以类的形式实现，而并非结构体。它们在被赋值或者被传入函数或方法时，不会发生值拷贝，而是传递现有实例的引用。
     
     注意
     以上是对字符串、数组、字典的“拷贝”行为的描述。在你的代码中，拷贝行为看起来似乎总会发生。然而，Swift 在幕后只在绝对必要时才执行实际的拷贝。Swift 管理所有的值拷贝以确保性能最优化，所以你没必要去回避赋值来保证性能最优化。”
     
     */
    
    func run() -> () {
        
    }
}
